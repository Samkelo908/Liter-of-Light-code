#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Define pins for external LEDs and the light sensor
const int ledPins[] = {D1, D2, D3, D4};  // Array for LED pins
const int lightSensorPin = A0;  // Pin for the light sensor (analog input)

const char* ssid = "Logic Legends";
const char* password = "123456789";

ESP8266WebServer server(80);

bool ledsState = false;   // Combined state for both LEDs
int lightThreshold = 30;  // Adjust the threshold value based on your sensor and environment
bool isDaylight = false;  // Flag to indicate if it's daylight or not

// HTML content moved to PROGMEM to save RAM
const char htmlContent[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>LED Control</title>
  <style>
    body { 
      font-family: 'Arial', sans-serif; 
      background-color: #f7f7f7; 
      margin: 0; 
      display: flex; 
      flex-direction: column; 
      justify-content: center; 
      align-items: center; 
      height: 100vh;
      color: #333;
    }
    h1 { 
      font-size: 36px; 
      color: #444; 
      margin-bottom: 20px; 
    }
    button {
      font-size: 18px;
      padding: 12px 24px;
      margin: 15px;
      border-radius: 8px;
      border: none;
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease-in-out;
    }
    button:hover {
      background-color: #45a049;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
      transform: translateY(-2px);
    }
    #dotButton {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background-color: #ff9800;
      border: none;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    .on { background-color: #4CAF50; }
    .off { background-color: #f44336; }
    #dotButton:hover {
      transform: scale(1.1);
    }
  </style>
</head>
<body>
  <h1>LED Control</h1>
  <button id="toggleButton">Toggle LEDs</button>
  <button id="dotButton" class="off"></button>
  <script>
    let ledsState = false;
    document.getElementById('toggleButton').addEventListener('click', function() {
      ledsState = !ledsState;
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/toggle", true);
      xhr.send();
      let dotButton = document.getElementById('dotButton');
      if (ledsState) {
        dotButton.classList.remove('off');
        dotButton.classList.add('on');
      } else {
        dotButton.classList.remove('on');
        dotButton.classList.add('off');
      }
    });
  </script>
</body>
</html>
)rawliteral";

void setup() {
  for (int i = 0; i < 4; ++i) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW); // LEDs off initially (assuming active low)
  }

  WiFi.softAP(ssid, password);
  Serial.begin(115200);
  Serial.println("Access Point started");
  Serial.print("IP Address: ");
  Serial.println(WiFi.softAPIP());

  server.on("/", HTTP_GET, handleRoot);
  server.on("/toggle", HTTP_GET, handleToggleLEDs);
  server.begin();
}

void loop() {
  daylightRoutine();
  delay(1000);
  server.handleClient();
}

void daylightRoutine() {
  int raw_light = analogRead(lightSensorPin);
  bool prevLight = isDaylight;
  isDaylight = raw_light > lightThreshold;
  if (!isDaylight && prevLight) {
    updateLed(true);
  } else if (isDaylight && !prevLight) {
    updateLed(false);
  }
}

void updateLed(bool state) {
  ledsState = state;
  for (int i = 0; i < 4; ++i) {
    digitalWrite(ledPins[i], ledsState ? HIGH : LOW);
  }
}

void handleRoot() {
  server.send_P(200, "text/html", htmlContent);
}

void handleToggleLEDs() {
  ledsState = !ledsState;
  updateLed(ledsState);
  server.send(200, "text/plain", "LEDs toggled");
}
